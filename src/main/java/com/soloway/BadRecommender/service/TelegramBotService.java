package com.soloway.BadRecommender.service;

import com.soloway.BadRecommender.config.TelegramBotConfig;
import com.soloway.BadRecommender.model.TelegramUser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import jakarta.annotation.PostConstruct;
import java.util.ArrayList;
import java.util.List;

/**
 * –°–µ—Ä–≤–∏—Å Telegram –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤
 */
@Service
public class TelegramBotService extends TelegramLongPollingBot {

    private static final Logger logger = LoggerFactory.getLogger(TelegramBotService.class);

    private final TelegramBotConfig botConfig;
    private final TelegramUserService userService;
    private final RecommendationService recommendationService;
    private final EmailService emailService;

    @Autowired
    public TelegramBotService(TelegramBotConfig botConfig, 
                            TelegramUserService userService,
                            RecommendationService recommendationService,
                            EmailService emailService) {
        this.botConfig = botConfig;
        this.userService = userService;
        this.recommendationService = recommendationService;
        this.emailService = emailService;
        
        logger.info("TelegramBotService —Å–æ–∑–¥–∞–Ω");
    }

    @PostConstruct
    public void init() {
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...");
        logger.info("Bot enabled: {}", botConfig.isBotEnabled());
        logger.info("Bot token: {}", botConfig.getBotToken() != null ? "***" : "null");
        logger.info("Bot username: {}", botConfig.getBotUsername());
    }

    @Override
    public String getBotToken() {
        String token = botConfig.getBotToken();
        logger.debug("–ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: {}", token != null ? "***" : "null");
        return token;
    }

    @Override
    public String getBotUsername() {
        String username = botConfig.getBotUsername();
        logger.debug("–ü–æ–ª—É—á–µ–Ω username –±–æ—Ç–∞: {}", username);
        return username;
    }

    @Override
    public void onUpdateReceived(Update update) {
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {}", update);
        
        if (!botConfig.isBotEnabled()) {
            logger.warn("Telegram bot is disabled");
            return;
        }

        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            Long chatId = update.getMessage().getChatId();
            String username = update.getMessage().getFrom().getUserName();
            String firstName = update.getMessage().getFrom().getFirstName();
            String lastName = update.getMessage().getFrom().getLastName();

            logger.info("Received message from {} ({}): {}", username, chatId, messageText);

            try {
                handleMessage(chatId, username, firstName, lastName, messageText);
            } catch (Exception e) {
                logger.error("Error handling message from {}: {}", chatId, e.getMessage(), e);
                sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start");
            }
        } else {
            logger.debug("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", update);
        }
    }

    private void handleMessage(Long chatId, String username, String firstName, String lastName, String messageText) {
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {}: {}", username, messageText);
        
        TelegramUser user = userService.getUser(chatId);
        user.setUsername(username);
        user.setFirstName(firstName);
        user.setLastName(lastName);

        if ("/start".equals(messageText)) {
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", username);
            handleStartCommand(user);
        } else if ("/help".equals(messageText)) {
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", username);
            handleHelpCommand(user);
        } else if ("/reset".equals(messageText)) {
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", username);
            handleResetCommand(user);
        } else {
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {}: {}", username, messageText);
            handleRegularMessage(user, messageText);
        }

        userService.updateUser(user);
    }

    private void handleStartCommand(TelegramUser user) {
        logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", user.getUsername());
        
        user.resetSurvey();
        user.setState(TelegramUser.UserState.WAITING_FOR_EMAIL);
        
        String welcomeMessage = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –æ –∑–¥–æ—Ä–æ–≤—å–µ.\n\n" +
                "–î–ª—è –Ω–∞—á–∞–ª–∞ –º–Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à email –∞–¥—Ä–µ—Å, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞.\n\n" +
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à email:";
        
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", user.getUsername());
        sendMessage(user.getChatId(), welcomeMessage);
    }

    private void handleHelpCommand(TelegramUser user) {
        String helpMessage = "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
                "/start - –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ\n" +
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n" +
                "/reset - –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ–ø—Ä–æ—Å\n\n" +
                "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reset";
        
        sendMessage(user.getChatId(), helpMessage);
    }

    private void handleResetCommand(TelegramUser user) {
        user.resetSurvey();
        user.setState(TelegramUser.UserState.WAITING_FOR_EMAIL);
        
        String resetMessage = "üîÑ –û–ø—Ä–æ—Å —Å–±—Ä–æ—à–µ–Ω. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ!\n\n" +
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:";
        
        sendMessage(user.getChatId(), resetMessage);
    }

    private void handleRegularMessage(TelegramUser user, String messageText) {
        switch (user.getState()) {
            case WAITING_FOR_EMAIL:
                handleEmailInput(user, messageText);
                break;
            case SURVEY_IN_PROGRESS:
                handleSurveyAnswer(user, messageText);
                break;
            case SURVEY_COMPLETED:
                handleCompletedSurvey(user, messageText);
                break;
            default:
                sendMessage(user.getChatId(), "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞");
        }
    }

    private void handleEmailInput(TelegramUser user, String email) {
        if (isValidEmail(email)) {
            user.setEmail(email);
            user.setState(TelegramUser.UserState.SURVEY_IN_PROGRESS);
            user.setCurrentQuestionIndex(0);
            
            sendMessage(user.getChatId(), "‚úÖ Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω: " + email + "\n\n" +
                    "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –æ–ø—Ä–æ—Å! –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–±–∏—Ä–∞—è –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.");
            
            sendNextQuestion(user);
        } else {
            sendMessage(user.getChatId(), "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å:");
        }
    }

    private void handleSurveyAnswer(TelegramUser user, String answer) {
        user.addAnswer(user.getCurrentQuestionIndex(), answer);
        user.nextQuestion();
        
        if (user.getCurrentQuestionIndex() >= 15) {
            completeSurvey(user);
        } else {
            sendNextQuestion(user);
        }
    }

    private void handleCompletedSurvey(TelegramUser user, String message) {
        if ("/start".equals(message)) {
            handleStartCommand(user);
        } else {
            sendMessage(user.getChatId(), "–û–ø—Ä–æ—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.");
        }
    }

    private void sendNextQuestion(TelegramUser user) {
        String questionText = "–í–æ–ø—Ä–æ—Å " + (user.getCurrentQuestionIndex() + 1) + " –∏–∑ 15:\n\n" +
                "–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ–µ –æ–±—â–µ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?";
        
        ReplyKeyboardMarkup keyboard = createAnswerKeyboard(
                "–û—Ç–ª–∏—á–Ω–æ", "–•–æ—Ä–æ—à–æ", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ", "–ü–ª–æ—Ö–æ"
        );
        
        sendMessageWithKeyboard(user.getChatId(), questionText, keyboard);
    }

    private void completeSurvey(TelegramUser user) {
        user.setState(TelegramUser.UserState.SURVEY_COMPLETED);
        user.setSurveyCompleted(true);
        
        String completionMessage = "üéâ –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n" +
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã. –ú—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –∏—Ö –Ω–∞ –≤–∞—à email: " + 
                user.getEmail() + "\n\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.";
        
        sendMessage(user.getChatId(), completionMessage);
    }

    private boolean isValidEmail(String email) {
        return email != null && email.matches("^[A-Za-z0-9+_.-]+@(.+)$");
    }

    private ReplyKeyboardMarkup createAnswerKeyboard(String... options) {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);
        keyboard.setSelective(true);

        List<KeyboardRow> keyboardRows = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        
        for (String option : options) {
            row.add(option);
            if (row.size() == 2) {
                keyboardRows.add(row);
                row = new KeyboardRow();
            }
        }
        
        if (!row.isEmpty()) {
            keyboardRows.add(row);
        }
        
        keyboard.setKeyboard(keyboardRows);
        return keyboard;
    }

    private void sendMessage(Long chatId, String text) {
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {}: {}", chatId, text);
        
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.enableMarkdown(true);
        
        try {
            execute(message);
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {}", chatId);
        } catch (TelegramApiException e) {
            logger.error("Error sending message to {}: {}", chatId, e.getMessage(), e);
        }
    }

    private void sendMessageWithKeyboard(Long chatId, String text, ReplyKeyboardMarkup keyboard) {
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤ —á–∞—Ç {}: {}", chatId, text);
        
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.enableMarkdown(true);
        message.setReplyMarkup(keyboard);
        
        try {
            execute(message);
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {}", chatId);
        } catch (TelegramApiException e) {
            logger.error("Error sending message with keyboard to {}: {}", chatId, e.getMessage(), e);
        }
    }
}

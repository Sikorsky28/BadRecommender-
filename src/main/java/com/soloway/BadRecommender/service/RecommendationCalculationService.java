package com.soloway.BadRecommender.service;

import com.soloway.BadRecommender.model.UserAnswer;
import com.soloway.BadRecommender.model.Supplement;
import com.soloway.BadRecommender.model.SupplementScore;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class RecommendationCalculationService {

    private final GoogleSheetsService googleSheetsService;

    public RecommendationCalculationService(GoogleSheetsService googleSheetsService) {
        this.googleSheetsService = googleSheetsService;
    }

    public RecommendationResult calculateRecommendations(List<UserAnswer> answers, String selectedTopic) {
        System.out.println("üßÆ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...");
        System.out.println("   –û—Ç–≤–µ—Ç–æ–≤: " + answers.size());
        System.out.println("   –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞: " + selectedTopic);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–±–∞–≤–∫–∏
        List<Supplement> allSupplements;
        try {
            allSupplements = googleSheetsService.loadSupplements();
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Google Sheets: " + e.getMessage());
            System.out.println("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ");
            allSupplements = createFallbackSupplements();
        }
        
        // –ï—Å–ª–∏ –¥–æ–±–∞–≤–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ
        if (allSupplements.isEmpty()) {
            System.out.println("‚ö†Ô∏è –î–æ–±–∞–≤–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ");
            allSupplements = createFallbackSupplements();
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ–±–∞–≤–∫–∏
        Map<Supplement, Double> supplementScores = new HashMap<>();
        
        for (Supplement supplement : allSupplements) {
            double score = calculateSupplementScore(supplement, answers, selectedTopic);
            supplementScores.put(supplement, score);
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–∫–∏ –ø–æ –±–∞–ª–ª–∞–º
        List<Supplement> sortedSupplements = supplementScores.entrySet().stream()
                .sorted(Map.Entry.<Supplement, Double>comparingByValue().reversed())
                .map(Map.Entry::getKey)
                .collect(Collectors.toList());

        // –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-3 –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        List<Supplement> mainRecommendations = sortedSupplements.stream()
                .limit(3)
                .collect(Collectors.toList());

        // –í—ã–±–∏—Ä–∞–µ–º 2 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (4-5 –º–µ—Å—Ç–∞)
        List<Supplement> additionalRecommendations = sortedSupplements.stream()
                .skip(3)
                .limit(2)
                .collect(Collectors.toList());

        // –°–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–π –¥–æ–±–∞–≤–∫–µ
        List<SupplementScore> supplementDetails = sortedSupplements.stream()
                .limit(5)
                .map(supplement -> {
                    SupplementScore score = new SupplementScore(
                            supplement.getName(),
                            supplementScores.get(supplement).intValue()
                    );
                    return score;
                })
                .collect(Collectors.toList());

        System.out.println("   –û—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: " + mainRecommendations.size());
        System.out.println("   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: " + additionalRecommendations.size());
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        System.out.println("üèÜ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:");
        for (Supplement supplement : mainRecommendations) {
            System.out.println("   - " + supplement.getName() + ": " + supplement.getDescription());
        }

        return new RecommendationResult(mainRecommendations, additionalRecommendations, supplementDetails);
    }

    private List<Supplement> createFallbackSupplements() {
        List<Supplement> supplements = new ArrayList<>();
        
        // –ë–æ–¥—Ä–æ—Å—Ç—å –∏ —ç–Ω–µ—Ä–≥–∏—è
        Supplement energy = new Supplement(1L, "ENERGY-001", "Energy", new com.soloway.BadRecommender.model.Category("–≠–Ω–µ—Ä–≥–∏—è"), 
                Set.of("energy", "vitality"), true);
        energy.setDescription("–ö–æ–º–ø–ª–µ–∫—Å –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø—ã B –∏ –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏. –ü–æ–º–æ–≥–∞–µ—Ç –±–æ—Ä–æ—Ç—å—Å—è —Å —É—Å—Ç–∞–ª–æ—Å—Ç—å—é –∏ —É–ª—É—á—à–∞–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –≤–Ω–∏–º–∞–Ω–∏—è.");
        supplements.add(energy);
        
        Supplement coq10 = new Supplement(2L, "COQ10-001", "Coenzyme Q10", new com.soloway.BadRecommender.model.Category("–≠–Ω–µ—Ä–≥–∏—è"), 
                Set.of("energy", "heart", "antioxidant"), true);
        coq10.setDescription("–ú–æ—â–Ω—ã–π –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å–µ—Ä–¥—Ü–∞ –∏ –ø–æ–≤—ã—à–∞–µ—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –æ–±–º–µ–Ω –≤ –∫–ª–µ—Ç–∫–∞—Ö. –û—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–µ–Ω –¥–ª—è –ª—é–¥–µ–π —Å—Ç–∞—Ä—à–µ 30 –ª–µ—Ç.");
        supplements.add(coq10);
        
        Supplement iron = new Supplement(3L, "IRON-001", "Iron bisglycinate", new com.soloway.BadRecommender.model.Category("–≠–Ω–µ—Ä–≥–∏—è"), 
                Set.of("energy", "iron", "hemoglobin"), true);
        iron.setDescription("–ñ–µ–ª–µ–∑–æ –≤ —Ö–µ–ª–∞—Ç–Ω–æ–π —Ñ–æ—Ä–º–µ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≥–µ–º–æ–≥–ª–æ–±–∏–Ω–∞ –∏ –±–æ—Ä—å–±—ã —Å –∞–Ω–µ–º–∏–µ–π. –£–ª—É—á—à–∞–µ—Ç –∫–∏—Å–ª–æ—Ä–æ–¥–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ —Ç–∫–∞–Ω–µ–π –∏ —Å–Ω–∏–∂–∞–µ—Ç —É—Å—Ç–∞–ª–æ—Å—Ç—å.");
        supplements.add(iron);
        
        Supplement tyrosine = new Supplement(4L, "TYR-001", "Tyrosine Complex", new com.soloway.BadRecommender.model.Category("–≠–Ω–µ—Ä–≥–∏—è"), 
                Set.of("energy", "thyroid", "tyrosine"), true);
        tyrosine.setDescription("–ê–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç–∞, –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ –¥–æ—Ñ–∞–º–∏–Ω–∞ –∏ –Ω–æ—Ä–∞–¥—Ä–µ–Ω–∞–ª–∏–Ω–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã –∏ —É–ª—É—á—à–∞–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.");
        supplements.add(tyrosine);
        
        // –ö—Ä–µ–ø–∫–∏–π —Å–æ–Ω, –º–µ–Ω—å—à–µ —Å—Ç—Ä–µ—Å—Å–∞
        Supplement magnesium = new Supplement(5L, "MAG-001", "Magnesium B6", new com.soloway.BadRecommender.model.Category("–°–æ–Ω"), 
                Set.of("sleep", "stress", "magnesium", "nerves"), true);
        magnesium.setDescription("–ú–∞–≥–Ω–∏–π —Å –≤–∏—Ç–∞–º–∏–Ω–æ–º B6 –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞. –ü–æ–º–æ–≥–∞–µ—Ç —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º –∏ –º—ã—à–µ—á–Ω—ã–º –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ–º.");
        supplements.add(magnesium);
        
        Supplement htp = new Supplement(6L, "5HTP-001", "5-HTP 100 –º–≥", new com.soloway.BadRecommender.model.Category("–°–æ–Ω"), 
                Set.of("sleep", "5-htp", "serotonin"), true);
        htp.setDescription("–ü—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ —Å–µ—Ä–æ—Ç–æ–Ω–∏–Ω–∞ –∏ –º–µ–ª–∞—Ç–æ–Ω–∏–Ω–∞. –ü–æ–º–æ–≥–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–Ω, —É–ª—É—á—à–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —Å–Ω–∏–∂–∞–µ—Ç —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å.");
        supplements.add(htp);
        
        Supplement same = new Supplement(7L, "SAME-001", "Complex B-SAMe", new com.soloway.BadRecommender.model.Category("–°–æ–Ω"), 
                Set.of("sleep", "stress", "same", "mood"), true);
        same.setDescription("SAMe —Å –≤–∏—Ç–∞–º–∏–Ω–∞–º–∏ –≥—Ä—É–ø–ø—ã B –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —Ä–∞–±–æ—Ç—ã –ø–µ—á–µ–Ω–∏. –ü–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏ –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –∏ —É–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞.");
        supplements.add(same);
        
        // –ö–æ–Ω—Ç—Ä–æ–ª—å –≤–µ—Å–∞ –∏ –∞–ø–ø–µ—Ç–∏—Ç–∞
        // Berberine + Betulin —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã - –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–¥–∞–µ—Ç—Å—è
        
        Supplement appetite = new Supplement(9L, "APP-001", "Appetite Control", new com.soloway.BadRecommender.model.Category("–í–µ—Å"), 
                Set.of("weight", "appetite", "hunger"), true);
        appetite.setDescription("–ö–æ–º–ø–ª–µ–∫—Å –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∞–ø–ø–µ—Ç–∏—Ç–∞ –∏ —á—É–≤—Å—Ç–≤–∞ –Ω–∞—Å—ã—â–µ–Ω–∏—è. –ü–æ–º–æ–≥–∞–µ—Ç —Å–Ω–∏–∑–∏—Ç—å —Ç—è–≥—É –∫ —Å–ª–∞–¥–∫–æ–º—É –∏ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏—é.");
        supplements.add(appetite);
        
        Supplement activeSlim = new Supplement(10L, "SLIM-001", "Active Slim", new com.soloway.BadRecommender.model.Category("–í–µ—Å"), 
                Set.of("weight", "slim", "metabolism"), true);
        activeSlim.setDescription("–ö–æ–º–ø–ª–µ–∫—Å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∂–∏–≥–∞–Ω–∏—è –∂–∏—Ä–∞ –∏ —É—Å–∫–æ—Ä–µ–Ω–∏—è –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ª—é–¥–µ–π, –≤–µ–¥—É—â–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏.");
        supplements.add(activeSlim);
        
        // –ß–∏—Å—Ç–∞—è –∫–æ–∂–∞, –∫—Ä–µ–ø–∫–∏–µ –≤–æ–ª–æ—Å—ã
        Supplement collagen = new Supplement(11L, "COLL-001", "Collagen Extra 2000 –º–≥", new com.soloway.BadRecommender.model.Category("–ö–æ–∂–∞"), 
                Set.of("skin", "collagen", "anti-aging"), true);
        collagen.setDescription("–û—Å–Ω–æ–≤–Ω–æ–π –±–µ–ª–æ–∫ –∫–æ–∂–∏, –≤–æ–ª–æ—Å –∏ –Ω–æ–≥—Ç–µ–π. –£–ª—É—á—à–∞–µ—Ç —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å –∫–æ–∂–∏, —Ä–∞–∑–≥–ª–∞–∂–∏–≤–∞–µ—Ç –º–æ—Ä—â–∏–Ω—ã –∏ —É–∫—Ä–µ–ø–ª—è–µ—Ç –≤–æ–ª–æ—Å—ã.");
        supplements.add(collagen);
        
        Supplement glutathione = new Supplement(12L, "GLUT-001", "Extra Glutathione", new com.soloway.BadRecommender.model.Category("–ö–æ–∂–∞"), 
                Set.of("skin", "glutathione", "antioxidant"), true);
        glutathione.setDescription("–ì–ª–∞–≤–Ω—ã–π –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç –æ—Ä–≥–∞–Ω–∏–∑–º–∞. –ó–∞—â–∏—â–∞–µ—Ç –∫–æ–∂—É –æ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ä–∞–¥–∏–∫–∞–ª–æ–≤, —É–ª—É—á—à–∞–µ—Ç —Ü–≤–µ—Ç –ª–∏—Ü–∞ –∏ –∑–∞–º–µ–¥–ª—è–µ—Ç —Å—Ç–∞—Ä–µ–Ω–∏–µ.");
        supplements.add(glutathione);
        
        Supplement hyaluronic = new Supplement(13L, "HYAL-001", "Hyaluronic acid", new com.soloway.BadRecommender.model.Category("–ö–æ–∂–∞"), 
                Set.of("skin", "hyaluronic", "hydration"), true);
        hyaluronic.setDescription("–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —É–≤–ª–∞–∂–Ω–∏—Ç–µ–ª—å –∫–æ–∂–∏. –£–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–ª–∞–≥—É, —Ä–∞–∑–≥–ª–∞–∂–∏–≤–∞–µ—Ç –º–æ—Ä—â–∏–Ω—ã –∏ —É–ª—É—á—à–∞–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä—É –∫–æ–∂–∏.");
        supplements.add(hyaluronic);
        
        // –ó–¥–æ—Ä–æ–≤–æ–µ —Å–µ—Ä–¥—Ü–µ –∏ —Å–æ—Å—É–¥—ã
        Supplement omega = new Supplement(14L, "OMEGA-001", "Extra Omega-3 (EPA 600 / DHA 240)", new com.soloway.BadRecommender.model.Category("–°–µ—Ä–¥—Ü–µ"), 
                Set.of("heart", "omega-3", "epa", "dha"), true);
        omega.setDescription("–ü–æ–ª–∏–Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–¥—Ü–∞ –∏ —Å–æ—Å—É–¥–æ–≤. –°–Ω–∏–∂–∞–µ—Ç –≤–æ—Å–ø–∞–ª–µ–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –º–æ–∑–≥–∞.");
        supplements.add(omega);
        
        Supplement resveratrol = new Supplement(15L, "RESV-001", "Resveratrol", new com.soloway.BadRecommender.model.Category("–°–µ—Ä–¥—Ü–µ"), 
                Set.of("heart", "resveratrol", "antioxidant"), true);
        resveratrol.setDescription("–ú–æ—â–Ω—ã–π –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç –∏–∑ –∫—Ä–∞—Å–Ω–æ–≥–æ –≤–∏–Ω–∞. –ó–∞—â–∏—â–∞–µ—Ç —Å–µ—Ä–¥—Ü–µ, –∑–∞–º–µ–¥–ª—è–µ—Ç —Å—Ç–∞—Ä–µ–Ω–∏–µ –∏ —É–ª—É—á—à–∞–µ—Ç –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏–µ.");
        supplements.add(resveratrol);
        
        Supplement tmg = new Supplement(16L, "TMG-001", "Complex B-TMG", new com.soloway.BadRecommender.model.Category("–°–µ—Ä–¥—Ü–µ"), 
                Set.of("heart", "tmg", "homocysteine"), true);
        tmg.setDescription("–¢—Ä–∏–º–µ—Ç–∏–ª–≥–ª–∏—Ü–∏–Ω –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –≥–æ–º–æ—Ü–∏—Å—Ç–µ–∏–Ω–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã.");
        supplements.add(tmg);
        
        // –°–∏–ª—å–Ω—ã–π –∏–º–º—É–Ω–∏—Ç–µ—Ç
        Supplement zinc = new Supplement(17L, "ZINC-001", "Zinc 25 mg", new com.soloway.BadRecommender.model.Category("–ò–º–º—É–Ω–∏—Ç–µ—Ç"), 
                Set.of("immunity", "zinc", "minerals"), true);
        zinc.setDescription("–¶–∏–Ω–∫ –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞ –∏ –∑–∞—â–∏—Ç—ã –æ—Ç –≤–∏—Ä—É—Å–æ–≤. –£—Å–∫–æ—Ä—è–µ—Ç –∑–∞–∂–∏–≤–ª–µ–Ω–∏–µ —Ä–∞–Ω –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–∂–∏.");
        supplements.add(zinc);
        
        Supplement selenium = new Supplement(18L, "SEL-001", "Selenium 100 ¬µ–≥", new com.soloway.BadRecommender.model.Category("–ò–º–º—É–Ω–∏—Ç–µ—Ç"), 
                Set.of("immunity", "selenium", "antioxidant"), true);
        selenium.setDescription("–ú–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç-–∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞ –∏ –∑–∞—â–∏—Ç—ã –æ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ä–∞–¥–∏–∫–∞–ª–æ–≤.");
        supplements.add(selenium);
        
        Supplement vitc = new Supplement(19L, "VITC-001", "Vitamin C", new com.soloway.BadRecommender.model.Category("–ò–º–º—É–Ω–∏—Ç–µ—Ç"), 
                Set.of("immunity", "vitamin-c", "antioxidant"), true);
        vitc.setDescription("–í–∏—Ç–∞–º–∏–Ω C –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞ –∏ –∑–∞—â–∏—Ç—ã –æ—Ç –ø—Ä–æ—Å—Ç—É–¥—ã. –ú–æ—â–Ω—ã–π –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–∂–∏ –∏ —Å–æ—Å—É–¥–æ–≤.");
        supplements.add(vitc);
        
        System.out.println("‚úÖ –°–æ–∑–¥–∞–Ω–æ fallback –¥–æ–±–∞–≤–æ–∫: " + supplements.size());
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        for (Supplement supplement : supplements) {
            System.out.println("üìù " + supplement.getName() + ": " + supplement.getDescription());
        }
        
        return supplements;
    }

    private double calculateSupplementScore(Supplement supplement, List<UserAnswer> answers, String selectedTopic) {
        double score = 0.0;

        // 1. –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –±–∞–ª–ª—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ (—Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó)
        score += calculateInitialScores(supplement, selectedTopic);

        // 2. –ë–∞–ª–ª—ã –∑–∞ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        score += calculateAnswerScores(supplement, answers);

        // 3. –ë–∞–ª–ª—ã –∑–∞ –æ–±—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã (–∫–æ—Ñ–µ, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∫—É—Ä–µ–Ω–∏–µ)
        score += calculateGeneralFactorScores(supplement, answers);

        return score;
    }

    private double calculateInitialScores(Supplement supplement, String selectedTopic) {
        double score = 0.0;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–≥–æ–≤ –¥–æ–±–∞–≤–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ
        if (supplement.getTags().contains(selectedTopic)) {
                score += 3; // –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–º–µ
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            switch (selectedTopic) {
                    case "energy":
                        if (supplement.getName().contains("Energy")) score += 2;
                        if (supplement.getName().contains("Coenzyme Q10")) score += 1;
                        if (supplement.getName().contains("Iron bisglycinate")) score += 1;
                        if (supplement.getName().contains("Tyrosine")) score += 1;
                        break;
                    case "sleep":
                        if (supplement.getName().contains("Magnesium B6")) score += 2;
                        if (supplement.getName().contains("5-HTP")) score += 2;
                        if (supplement.getName().contains("SAMe")) score += 1;
                        break;
                case "weight":
                    if (supplement.getName().contains("Appetite Control")) score += 3;
                    if (supplement.getName().contains("Active Slim")) score += 2;
                    if (supplement.getName().contains("Comfort Slim")) score += 2;
                    if (supplement.getName().contains("Alpha-lipoic acid")) score += 2;
                    break;
                case "skin":
                    if (supplement.getName().contains("Collagen")) score += 3;
                    if (supplement.getName().contains("Glutathione")) score += 3;
                    if (supplement.getName().contains("Hyaluronic acid")) score += 2;
                    if (supplement.getName().contains("Hair Complex")) score += 2;
                    if (supplement.getName().contains("Biotin")) score += 1;
                    break;
                case "digestion":
                    if (supplement.getName().contains("Prebio Complex")) score += 3;
                    if (supplement.getName().contains("Synbiotic")) score += 2;
                    if (supplement.getName().contains("Curcumin")) score += 2;
                    if (supplement.getName().contains("SAMe")) score += 1;
                    break;
                case "joints":
                    if (supplement.getName().contains("Glucosamine")) score += 3;
                    if (supplement.getName().contains("Collagen")) score += 2;
                    if (supplement.getName().contains("Hyaluronic acid")) score += 2;
                    if (supplement.getName().contains("Vitamin D3")) score += 2;
                    break;
                case "immunity":
                    if (supplement.getName().contains("Zinc")) score += 2;
                    if (supplement.getName().contains("Selenium")) score += 2;
                    if (supplement.getName().contains("Lactoferrin")) score += 2;
                    if (supplement.getName().contains("Vitamin C")) score += 2;
                    if (supplement.getName().contains("Gingko Biloba")) score += 2;
                    if (supplement.getName().contains("Vitamin D3")) score += 2;
                    break;
                case "heart":
                    if (supplement.getName().contains("Omega-3")) score += 3;
                    if (supplement.getName().contains("Coenzyme Q10")) score += 2;
                    if (supplement.getName().contains("Resveratrol")) score += 2;
                    if (supplement.getName().contains("TMG")) score += 2;
                    if (supplement.getName().contains("Curcumin")) score += 2;
                    break;
                case "thyroid":
                    if (supplement.getName().contains("Tyrosine")) score += 3;
                    if (supplement.getName().contains("Selenium")) score += 1;
                    break;
                case "cycle":
                    if (supplement.getName().contains("Inositol")) score += 3;
                    if (supplement.getName().contains("DIM")) score += 2;
                    if (supplement.getName().contains("Zinc")) score += 1;
                    break;
                case "menopause":
                    if (supplement.getName().contains("Lignagallat")) score += 3;
                    if (supplement.getName().contains("DIM")) score += 1;
                    if (supplement.getName().contains("Omega-3")) score += 1;
                    break;
                case "prostate":
                    if (supplement.getName().contains("nO-Prost")) score += 3;
                    if (supplement.getName().contains("Men's Formula")) score += 2;
                    if (supplement.getName().contains("Zinc")) score += 1;
                    break;
                case "iron":
                    if (supplement.getName().contains("Iron bisglycinate")) score += 3;
                    if (supplement.getName().contains("Iron Chelate")) score += 2;
                    if (supplement.getName().contains("Lactoferrin")) score += 3;
                    break;
            }
        }
        
        return score;
    }

    private double calculateAnswerScores(Supplement supplement, List<UserAnswer> answers) {
        double score = 0.0;
        
        for (UserAnswer answer : answers) {
            // –£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
            switch (answer.getQuestionId()) {
                case "afternoon_sleep":
                    if ("sometimes".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Energy")) score += 1;
                        if (supplement.getName().contains("CoQ10")) score += 1;
                    } else if ("almost_everyday".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Energy")) score += 2;
                        if (supplement.getName().contains("CoQ10")) score += 2;
                    }
                    break;
                case "coffee_amount":
                    if ("2-3".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Magnesium B6")) score += 1;
                    } else if ("4+".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Magnesium B6")) score += 2;
                    }
                    break;
                case "sleep_time":
                    if ("yes".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("5-HTP")) score += 3;
                        if (supplement.getName().contains("Magnesium B6")) score += 2;
                    }
                    break;
                case "anxiety_level":
                    if ("7-8".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("SAMe")) score += 1;
                        if (supplement.getName().contains("Magnesium B6")) score += 1;
                    } else if ("9-10".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("SAMe")) score += 2;
                        if (supplement.getName().contains("Magnesium B6")) score += 2;
                    }
                    break;
                case "weight_difficulty":
                    if ("hunger".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Appetite Control")) score += 3;
                    } else if ("sweet_craving".equals(answer.getAnswer())) {
                        // Berberine —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                    }
                    break;
                case "dry_skin":
                    if ("yes".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Hyaluronic acid")) score += 3;
                        if (supplement.getName().contains("Collagen")) score += 2;
                    }
                    break;

                case "bloating":
                    if ("yes".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Prebio Complex")) score += 3;
                    }
                    break;

                case "frequent_colds":
                    if ("yes".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Zinc")) score += 2;
                        if (supplement.getName().contains("Vitamin D3")) score += 1;
                    }
                    break;
                case "ldl_level":
                    if ("yes".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Omega-3")) score += 3;
                    }
                    break;
                case "tsh_level":
                    if ("yes".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Tyrosine")) score += 3;
                        if (supplement.getName().contains("Selenium")) score += 1;
                    }
                    break;
                case "cycle_length":
                    if ("yes".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Inositol")) score += 3;
                    }
                    break;
                case "hot_flashes":
                    if ("yes".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Lignagallat")) score += 3;
                    }
                    break;
                case "urine_stream":
                    if ("yes".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("nO-Prost")) score += 3;
                    }
                    break;
                case "ferritin_level":
                    if ("yes".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Iron bisglycinate")) score += 3;
                    }
                    break;
                case "iron_tolerance":
                    if ("yes".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Lactoferrin")) score += 3;
                        // Iron bisglycinate ‚Üí 0 (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–µ)
                        if (supplement.getName().contains("Iron bisglycinate")) score = 0;
                    }
                    break;
                    
                // –ù–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–º—ã "–∂–µ–ª–µ–∑–æ"
                case "iron_deficiency_doctor":
                    if ("–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Iron Chelate")) score += 3;
                    } else if ("–Ω–µ –∑–Ω–∞—é".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Iron Chelate")) score += 1;
                    }
                    break;
                    
                case "weakness_fatigue":
                    if ("–Ω–µ–º–Ω–æ–≥–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Iron Chelate")) score += 2;
                    } else if ("—Å–∏–ª—å–Ω–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Iron Chelate")) score += 3;
                    }
                    break;
                    
                case "dizziness_shortness":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Iron Chelate")) score += 2;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Iron Chelate")) score += 3;
                    }
                    break;
                    
                case "blood_loss":
                    if ("–±—ã–ª–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Iron Chelate")) score += 2;
                    } else if ("–¥–∞, —Ä–µ–≥—É–ª—è—Ä–Ω–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Iron Chelate")) score += 3;
                    }
                    break;
                    
                case "vegetarian_vegan":
                    if ("–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Iron Chelate")) score += 3;
                        if (supplement.getName().contains("Lactoferrin")) score += 2;
                    }
                    break;
                    
                case "gut_sensitivity":
                    if ("–Ω–µ–º–Ω–æ–≥–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Lactoferrin")) score += 2;
                    } else if ("–≤—ã—Ä–∞–∂–µ–Ω–Ω–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Lactoferrin")) score += 3;
                    }
                    break;
                    
                // –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–º—ã "–ë–æ–¥—Ä–æ—Å—Ç—å –∏ —ç–Ω–µ—Ä–≥–∏—è"
                case "morning_energy":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Tyrosine")) score += 2;
                        if (supplement.getName().contains("Energy")) score += 2;
                    } else if ("–ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Tyrosine")) score += 3;
                        if (supplement.getName().contains("Energy")) score += 3;
                    }
                    break;
                    
                case "afternoon_crash":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Energy")) score += 2;
                        if (supplement.getName().contains("CoQ10")) score += 1;
                    } else if ("–ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Energy")) score += 3;
                        if (supplement.getName().contains("CoQ10")) score += 2;
                    }
                    break;
                    
                case "post_infection_fatigue":
                    if ("–±—ã–ª–æ, –Ω–æ –ø—Ä–æ—à–ª–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("CoQ10")) score += 2;
                        if (supplement.getName().contains("Energy")) score += 1;
                    } else if ("–¥–∞, –¥–µ—Ä–∂–∏—Ç—Å—è".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("CoQ10")) score += 3;
                        if (supplement.getName().contains("Energy")) score += 3;
                    }
                    break;
                    
                case "exercise_fatigue":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("CoQ10")) score += 2;
                        if (supplement.getName().contains("Energy")) score += 2;
                    } else if ("–ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("CoQ10")) score += 3;
                        if (supplement.getName().contains("Energy")) score += 3;
                    }
                    break;
                    
                case "iron_anemia_doctor":
                    if ("–Ω–µ –∑–Ω–∞—é".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Iron Chelate")) score += 2;
                        if (supplement.getName().contains("CoQ10")) score += 1;
                    } else if ("–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Iron Chelate")) score += 3;
                        if (supplement.getName().contains("CoQ10")) score += 2;
                    }
                    break;
                    
                case "caffeine_sensitivity":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Magnesium B6")) score += 2;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Magnesium B6")) score += 3;
                    }
                    break;
                    
                // –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–º—ã "–ö—Ä–µ–ø–∫–∏–π —Å–æ–Ω, –º–µ–Ω—å—à–µ —Å—Ç—Ä–µ—Å—Å–∞"
                case "sleep_onset":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("5-HTP")) score += 2;
                        if (supplement.getName().contains("Magnesium B6")) score += 2;
                    } else if ("–ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("5-HTP")) score += 3;
                        if (supplement.getName().contains("Magnesium B6")) score += 3;
                    }
                    break;
                    
                case "night_awakenings":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Magnesium B6")) score += 2;
                        if (supplement.getName().contains("5-HTP")) score += 2;
                    } else if ("–ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Magnesium B6")) score += 3;
                        if (supplement.getName().contains("5-HTP")) score += 3;
                    }
                    break;
                    
                case "chronic_stress":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Complex B-SAMe")) score += 2;
                        if (supplement.getName().contains("Magnesium B6")) score += 2;
                    } else if ("–ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Complex B-SAMe")) score += 3;
                        if (supplement.getName().contains("Magnesium B6")) score += 3;
                    }
                    break;
                    
                case "low_motivation":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Complex B-SAMe")) score += 2;
                        if (supplement.getName().contains("5-HTP")) score += 2;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Complex B-SAMe")) score += 3;
                        if (supplement.getName().contains("5-HTP")) score += 3;
                    }
                    break;
                    
                case "screen_before_bed":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Magnesium B6")) score += 1;
                        if (supplement.getName().contains("5-HTP")) score += 1;
                    } else if ("–ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Magnesium B6")) score += 2;
                        if (supplement.getName().contains("5-HTP")) score += 2;
                    }
                    break;
                    
                case "stress_impact":
                    if ("—Å–∫–æ—Ä–µ–µ –¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Magnesium B6")) score += 2;
                        if (supplement.getName().contains("Complex B-SAMe")) score += 2;
                        if (supplement.getName().contains("5-HTP")) score += 1;
                    } else if ("–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Magnesium B6")) score += 3;
                        if (supplement.getName().contains("Complex B-SAMe")) score += 3;
                        if (supplement.getName().contains("5-HTP")) score += 2;
                    }
                    break;
                    
                // –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–º—ã "–ö–æ–Ω—Ç—Ä–æ–ª—å –≤–µ—Å–∞ –∏ –∞–ø–ø–µ—Ç–∏—Ç–∞"
                case "portion_control":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Appetite Control")) score += 2;
                        if (supplement.getName().contains("Active Slim")) score += 1;
                    } else if ("–ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Appetite Control")) score += 3;
                        if (supplement.getName().contains("Active Slim")) score += 2;
                    }
                    break;
                    
                case "night_snacking":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Comfort Slim")) score += 2;
                        if (supplement.getName().contains("Appetite Control")) score += 1;
                    } else if ("–ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Comfort Slim")) score += 3;
                        if (supplement.getName().contains("Appetite Control")) score += 2;
                    }
                    break;
                    
                case "late_dinner":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Comfort Slim")) score += 1;
                        if (supplement.getName().contains("Active Slim")) score += 1;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Comfort Slim")) score += 2;
                        if (supplement.getName().contains("Active Slim")) score += 2;
                    }
                    break;
                    
                case "skip_breakfast":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Alpha-lipoic")) score += 1;
                        if (supplement.getName().contains("Appetite Control")) score += 1;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Alpha-lipoic")) score += 2;
                        if (supplement.getName().contains("Appetite Control")) score += 2;
                    }
                    break;
                    
                case "bloating_sugar_cravings":
                    // Berberine —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                    break;
                    
                case "waist_increase":
                    if ("–Ω–µ–º–Ω–æ–≥–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Alpha-lipoic")) score += 2;
                        // Berberine —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                    } else if ("–≤—ã—Ä–∞–∂–µ–Ω–Ω–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Alpha-lipoic")) score += 3;
                        // Berberine —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                    }
                    break;
                    
                // –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–º—ã "–ß–∏—Å—Ç–∞—è –∫–æ–∂–∞, –∫—Ä–µ–ø–∫–∏–µ –≤–æ–ª–æ—Å—ã"
                case "deep_acne":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Omega-3")) score += 2;
                        if (supplement.getName().contains("Glutathione")) score += 1;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Omega-3")) score += 3;
                        if (supplement.getName().contains("Glutathione")) score += 2;
                    }
                    break;
                    
                case "acne_marks":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Glutathione")) score += 2;
                        if (supplement.getName().contains("Omega-3")) score += 1;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Glutathione")) score += 3;
                        if (supplement.getName().contains("Omega-3")) score += 2;
                    }
                    break;
                    
                case "wrinkles_elasticity":
                    if ("–Ω–µ–º–Ω–æ–≥–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Collagen")) score += 2;
                        if (supplement.getName().contains("Hyaluronic")) score += 1;
                    } else if ("–≤—ã—Ä–∞–∂–µ–Ω–Ω–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Collagen")) score += 3;
                        if (supplement.getName().contains("Hyaluronic")) score += 2;
                    }
                    break;
                    
                case "hair_loss":
                    if ("–Ω–µ–º–Ω–æ–≥–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Hair Complex")) score += 2;
                        if (supplement.getName().contains("Biotin")) score += 1;
                    } else if ("–∑–∞–º–µ—Ç–Ω–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Hair Complex")) score += 3;
                        if (supplement.getName().contains("Biotin")) score += 2;
                    }
                    break;
                    
                case "scalp_issues":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Hair Complex")) score += 2;
                        if (supplement.getName().contains("Zinc")) score += 1;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Hair Complex")) score += 3;
                        if (supplement.getName().contains("Zinc")) score += 2;
                    }
                    break;
                    
                case "skin_irritation":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Omega-3")) score += 2;
                        if (supplement.getName().contains("Glutathione")) score += 1;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Omega-3")) score += 3;
                        if (supplement.getName().contains("Glutathione")) score += 2;
                    }
                    break;
                    
                // –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–º—ã "–ö–æ–º—Ñ–æ—Ä—Ç –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è"
                case "recent_antibiotics":
                    if ("–¥–∞".equals(answer.getAnswer()) || "–Ω–µ –ø–æ–º–Ω—é".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Synbiotic")) score += 3;
                    }
                    break;
                    
                case "dairy_intolerance":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Prebio")) score += 2;
                        if (supplement.getName().contains("Synbiotic")) score += 1;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Prebio")) score += 3;
                        if (supplement.getName().contains("Synbiotic")) score += 2;
                    }
                    break;
                    
                case "post_meal_discomfort":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        // Berberine —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                        if (supplement.getName().contains("Curcumin")) score += 1;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        // Berberine —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                        if (supplement.getName().contains("Curcumin")) score += 2;
                    }
                    break;
                    
                case "ibs_diagnosis":
                    if ("–¥–∞".equals(answer.getAnswer()) || "–Ω–µ –∑–Ω–∞—é".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Curcumin")) score += 3;
                        if (supplement.getName().contains("Synbiotic")) score += 2;
                    }
                    break;
                    
                case "stress_gut_symptoms":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Complex B-SAMe")) score += 2;
                        if (supplement.getName().contains("Prebio")) score += 1;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Complex B-SAMe")) score += 3;
                        if (supplement.getName().contains("Prebio")) score += 2;
                    }
                    break;
                    
                case "bloating_sweet_cravings":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        // Berberine —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                        if (supplement.getName().contains("Synbiotic")) score += 1;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        // Berberine —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                        if (supplement.getName().contains("Synbiotic")) score += 2;
                    }
                    break;
                    
                // –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–º—ã "–ü–æ–¥–≤–∏–∂–Ω—ã–µ —Å—É—Å—Ç–∞–≤—ã, –∫—Ä–µ–ø–∫–∏–µ –∫–æ—Å—Ç–∏"
                case "regular_exercise":
                    if ("1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Collagen")) score += 1;
                        if (supplement.getName().contains("Glucosamine")) score += 1;
                    } else if ("3 –∏ –±–æ–ª–µ–µ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Collagen")) score += 2;
                        if (supplement.getName().contains("Glucosamine")) score += 2;
                    }
                    break;
                    
                case "recent_injuries":
                    if ("–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Glucosamine")) score += 2;
                        if (supplement.getName().contains("Collagen")) score += 2;
                    } else if ("–ø–æ–≤—Ç–æ—Ä–Ω—ã–µ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Glucosamine")) score += 3;
                        if (supplement.getName().contains("Collagen")) score += 3;
                    }
                    break;
                    
                case "joint_dryness":
                    if ("–Ω–µ–º–Ω–æ–≥–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Hyaluronic")) score += 2;
                        if (supplement.getName().contains("Collagen")) score += 1;
                    } else if ("–≤—ã—Ä–∞–∂–µ–Ω–Ω–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Hyaluronic")) score += 3;
                        if (supplement.getName().contains("Collagen")) score += 2;
                    }
                    break;
                    
                case "age_category":
                    if ("35‚Äì49 –ª–µ—Ç".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Collagen")) score += 2;
                        if (supplement.getName().contains("Glucosamine")) score += 1;
                    } else if ("50+ –ª–µ—Ç".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Collagen")) score += 3;
                        if (supplement.getName().contains("Glucosamine")) score += 2;
                    }
                    break;
                    
                case "knee_pain":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Glucosamine")) score += 2;
                        if (supplement.getName().contains("Curcumin")) score += 1;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Glucosamine")) score += 3;
                        if (supplement.getName().contains("Curcumin")) score += 2;
                    }
                    break;
                    
                case "bone_density_risk":
                    if ("–¥–∞".equals(answer.getAnswer()) || "–Ω–µ –∑–Ω–∞—é".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Vitamin D3")) score += 3;
                    }
                    break;
                    
                // –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–º—ã "–°–∏–ª—å–Ω—ã–π –∏–º–º—É–Ω–∏—Ç–µ—Ç"
                case "social_contact":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Lactoferrin")) score += 1;
                        if (supplement.getName().contains("Vitamin C")) score += 1;
                        if (supplement.getName().contains("Zinc")) score += 1;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Lactoferrin")) score += 2;
                        if (supplement.getName().contains("Vitamin C")) score += 2;
                        if (supplement.getName().contains("Zinc")) score += 2;
                    }
                    break;
                    
                case "prolonged_colds":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Vitamin C")) score += 2;
                        if (supplement.getName().contains("Zinc")) score += 1;
                        if (supplement.getName().contains("Lactoferrin")) score += 1;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Vitamin C")) score += 3;
                        if (supplement.getName().contains("Zinc")) score += 2;
                        if (supplement.getName().contains("Lactoferrin")) score += 2;
                    }
                    break;
                    
                case "frequent_infections":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Lactoferrin")) score += 2;
                        if (supplement.getName().contains("Vitamin C")) score += 2;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Lactoferrin")) score += 3;
                        if (supplement.getName().contains("Vitamin C")) score += 3;
                    }
                    break;
                    
                case "cold_extremities":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Ginkgo Biloba")) score += 2;
                        if (supplement.getName().contains("Vitamin C")) score += 1;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Ginkgo Biloba")) score += 3;
                        if (supplement.getName().contains("Vitamin C")) score += 2;
                    }
                    break;
                    
                case "autoimmune_thyroid":
                    if ("–¥–∞".equals(answer.getAnswer()) || "–Ω–µ –∑–Ω–∞—é".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Selenium")) score += 3;
                        if (supplement.getName().contains("Vitamin D3")) score += 2;
                    }
                    break;
                    
                case "sleep_deprivation":
                    if ("1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Vitamin C")) score += 1;
                        if (supplement.getName().contains("Zinc")) score += 1;
                    } else if ("3-4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –∏–ª–∏ —á–∞—â–µ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Vitamin C")) score += 2;
                        if (supplement.getName().contains("Zinc")) score += 2;
                    }
                    break;
                    
                // –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–º—ã "–ó–¥–æ—Ä–æ–≤–æ–µ —Å–µ—Ä–¥—Ü–µ –∏ —Å–æ—Å—É–¥—ã"
                case "family_cardiovascular":
                    if ("–¥–∞".equals(answer.getAnswer()) || "–Ω–µ –∑–Ω–∞—é".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Omega-3")) score += 3;
                        if (supplement.getName().contains("Resveratrol")) score += 2;
                        if (supplement.getName().contains("B-TMG")) score += 2;
                    }
                    break;
                    
                case "exercise_fatigue_heart":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("CoQ10")) score += 2;
                        if (supplement.getName().contains("Omega-3")) score += 1;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("CoQ10")) score += 3;
                        if (supplement.getName().contains("Omega-3")) score += 2;
                    }
                    break;
                    
                case "homocysteine_elevated":
                    if ("–¥–∞".equals(answer.getAnswer()) || "–Ω–µ –∑–Ω–∞—é".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("B-TMG")) score += 3;
                    }
                    break;
                    
                case "inflammation_joints":
                    if ("–¥–∞".equals(answer.getAnswer()) || "–Ω–µ –∑–Ω–∞—é".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Curcumin")) score += 3;
                        if (supplement.getName().contains("Omega-3")) score += 2;
                        if (supplement.getName().contains("Resveratrol")) score += 2;
                    }
                    break;
                    
                case "sedentary_lifestyle":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Omega-3")) score += 1;
                        if (supplement.getName().contains("Resveratrol")) score += 1;
                    } else if ("–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Omega-3")) score += 2;
                        if (supplement.getName().contains("Resveratrol")) score += 2;
                    }
                    break;
                    
                case "circulation_issues":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Resveratrol")) score += 2;
                        if (supplement.getName().contains("CoQ10")) score += 1;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Resveratrol")) score += 3;
                        if (supplement.getName().contains("CoQ10")) score += 2;
                    }
                    break;
                    
                // –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–º—ã "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã"
                case "cold_sensitivity":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Tyrosine")) score += 2;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Tyrosine")) score += 3;
                    }
                    break;
                    
                case "tsh_elevated":
                    if ("–Ω–µ –∑–Ω–∞—é".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Tyrosine")) score += 2;
                        if (supplement.getName().contains("Selenium")) score += 1;
                    } else if ("–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Tyrosine")) score += 3;
                        if (supplement.getName().contains("Selenium")) score += 2;
                    }
                    break;
                    
                case "autoimmune_thyroid_specific":
                    if ("–¥–∞".equals(answer.getAnswer()) || "–Ω–µ –∑–Ω–∞—é".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Selenium")) score += 3;
                    }
                    break;
                    
                case "constipation":
                    if ("–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Selenium")) score += 2;
                        if (supplement.getName().contains("Tyrosine")) score += 2;
                    }
                    break;
                    
                case "voice_neck_discomfort":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Selenium")) score += 2;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Selenium")) score += 3;
                    }
                    break;
                    
                case "evening_energy_drop":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Tyrosine")) score += 2;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Tyrosine")) score += 3;
                    }
                    break;
                    
                // –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–º—ã "–†–µ–≥—É–ª—è—Ä–Ω—ã–π —Ü–∏–∫–ª, –º—è–≥–∫–∏–π –ü–ú–°"
                case "irregular_cycle":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Inositol")) score += 2;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Inositol")) score += 3;
                    }
                    break;
                    
                case "pms_symptoms":
                    if ("—É–º–µ—Ä–µ–Ω–Ω–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("DIM")) score += 2;
                    } else if ("—Å–∏–ª—å–Ω–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("DIM")) score += 3;
                    }
                    break;
                    
                case "premenstrual_acne":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Zinc")) score += 2;
                        if (supplement.getName().contains("DIM")) score += 1;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Zinc")) score += 3;
                        if (supplement.getName().contains("DIM")) score += 2;
                    }
                    break;
                    
                case "menstrual_pain":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Zinc")) score += 2;
                        if (supplement.getName().contains("DIM")) score += 1;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Zinc")) score += 3;
                        if (supplement.getName().contains("DIM")) score += 2;
                    }
                    break;
                    
                case "heavy_periods":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("DIM")) score += 2;
                        if (supplement.getName().contains("Zinc")) score += 1;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("DIM")) score += 3;
                        if (supplement.getName().contains("Zinc")) score += 2;
                    }
                    break;
                    
                case "pregnancy_planning":
                    if ("–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Inositol")) score += 3;
                    }
                    break;
                    
                // –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–º—ã "–ú–µ–Ω–æ–ø–∞—É–∑–∞ –±–µ–∑ –ø—Ä–∏–ª–∏–≤–æ–≤"
                case "hot_flashes_frequent":
                    if ("–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Lignagallat")) score += 3;
                        if (supplement.getName().contains("DIM")) score += 2;
                    }
                    break;
                    
                case "night_hot_flashes":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Lignagallat")) score += 2;
                        if (supplement.getName().contains("Omega-3")) score += 1;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Lignagallat")) score += 3;
                        if (supplement.getName().contains("Omega-3")) score += 2;
                    }
                    break;
                    
                case "mood_changes_menopause":
                    if ("–Ω–µ–º–Ω–æ–≥–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("DIM")) score += 2;
                        if (supplement.getName().contains("Omega-3")) score += 1;
                    } else if ("—Å–∏–ª—å–Ω–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("DIM")) score += 3;
                        if (supplement.getName().contains("Omega-3")) score += 2;
                    }
                    break;
                    
                case "joint_pain_menopause":
                    if ("–Ω–µ–º–Ω–æ–≥–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Omega-3")) score += 2;
                        if (supplement.getName().contains("Curcumin")) score += 1;
                    } else if ("–≤—ã—Ä–∞–∂–µ–Ω–Ω–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Omega-3")) score += 3;
                        if (supplement.getName().contains("Curcumin")) score += 2;
                    }
                    break;
                    
                case "weight_gain_menopause":
                    if ("–Ω–µ–º–Ω–æ–≥–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("DIM")) score += 2;
                        if (supplement.getName().contains("Omega-3")) score += 1;
                    } else if ("–∑–∞–º–µ—Ç–Ω–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("DIM")) score += 3;
                        if (supplement.getName().contains("Omega-3")) score += 2;
                    }
                    break;
                    
                case "family_hormone_cancer":
                    if ("–¥–∞".equals(answer.getAnswer()) || "–Ω–µ –∑–Ω–∞—é".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("DIM")) score += 3;
                    }
                    break;
                    
                // –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–º—ã "–ú—É–∂—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ"
                case "urinary_symptoms":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("nO-Prost Complex")) score += 2;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("nO-Prost Complex")) score += 3;
                    }
                    break;
                    
                case "energy_libido_decline":
                    if ("–Ω–µ–º–Ω–æ–≥–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Men's Formula")) score += 2;
                        if (supplement.getName().contains("Zinc")) score += 1;
                        if (supplement.getName().contains("Omega-3")) score += 1;
                    } else if ("—Å–∏–ª—å–Ω–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Men's Formula")) score += 3;
                        if (supplement.getName().contains("Zinc")) score += 2;
                        if (supplement.getName().contains("Omega-3")) score += 2;
                    }
                    break;
                    
                case "prostate_discomfort":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("nO-Prost Complex")) score += 2;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("nO-Prost Complex")) score += 3;
                    }
                    break;
                    
                case "male_hair_loss":
                    if ("–Ω–µ–º–Ω–æ–≥–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Zinc")) score += 2;
                    } else if ("–≤—ã—Ä–∞–∂–µ–Ω–Ω–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Zinc")) score += 3;
                    }
                    break;
                    
                case "recovery_time":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Men's Formula")) score += 2;
                        if (supplement.getName().contains("Omega-3")) score += 1;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Men's Formula")) score += 3;
                        if (supplement.getName().contains("Omega-3")) score += 2;
                    }
                    break;
                    
                case "red_meat_consumption":
                    if ("1-4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Omega-3")) score += 1;
                    } else if ("–∫–∞–∂–¥—ã–π –¥–µ–Ω—å".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Omega-3")) score += 2;
                    }
                    break;
                    
                // –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º
                case "fish_consumption":
                    if ("–ø–æ—á—Ç–∏ –Ω–∏–∫–æ–≥–¥–∞".equals(answer.getAnswer()) || "—Ä–µ–∂–µ 1 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Omega-3")) score += 3;
                    }
                    break;
                    
                case "coffee_daily":
                    if ("2‚Äì3".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Magnesium B6")) score += 2;
                    } else if ("4+".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Magnesium B6")) score += 3;
                    }
                    break;
                    
                case "physical_activity":
                    if ("3‚Äì4".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("CoQ10")) score += 2;
                        if (supplement.getName().contains("Magnesium B6")) score += 1;
                    } else if ("5+".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("CoQ10")) score += 3;
                        if (supplement.getName().contains("Magnesium B6")) score += 2;
                    }
                    break;
                    
                case "smoking_vaping":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Vitamin C")) score += 2;
                        if (supplement.getName().contains("Omega-3")) score += 1;
                    } else if ("—Ä–µ–≥—É–ª—è—Ä–Ω–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Vitamin C")) score += 3;
                        if (supplement.getName().contains("Omega-3")) score += 2;
                        if (supplement.getName().contains("Curcumin")) score += 2;
                    }
                    break;
                    
                case "sweet_cravings":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Alpha-lipoic")) score += 2;
                        // Berberine —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Alpha-lipoic")) score += 3;
                        // Berberine —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                    }
                    break;
                    
                case "digestive_issues":
                    if ("–∏–Ω–æ–≥–¥–∞".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Prebio")) score += 2;
                        if (supplement.getName().contains("Synbiotic")) score += 1;
                    } else if ("—á–∞—Å—Ç–æ".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Prebio")) score += 3;
                        if (supplement.getName().contains("Synbiotic")) score += 2;
                    }
                    break;
                    
                case "cold_frequency":
                    if ("2‚Äì3".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Zinc")) score += 2;
                        if (supplement.getName().contains("Vitamin C")) score += 1;
                    } else if ("4+".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Zinc")) score += 3;
                        if (supplement.getName().contains("Vitamin C")) score += 2;
                        if (supplement.getName().contains("Lactoferrin")) score += 2;
                    }
                    break;
            }
        }
        
        return score;
    }

    private double calculateGeneralFactorScores(Supplement supplement, List<UserAnswer> answers) {
        double score = 0.0;
        
        for (UserAnswer answer : answers) {
            switch (answer.getQuestionId()) {
                case "coffee":
                    if ("2-3".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Magnesium B6")) score += 1;
                    } else if ("4+".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Magnesium B6")) score += 2;
                    }
                    break;
                case "training":
                    if ("4+".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Magnesium B6")) score += 1;
                        if (supplement.getName().contains("CoQ10")) score += 1;
                    }
                    break;
                case "smoking":
                    if ("5-9".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Omega-3")) score += 1;
                        if (supplement.getName().contains("CoQ10")) score += 1;
                        if (supplement.getName().contains("Selenium")) score += 1;
                    } else if ("10+".equals(answer.getAnswer())) {
                        if (supplement.getName().contains("Omega-3")) score += 2;
                        if (supplement.getName().contains("CoQ10")) score += 2;
                        if (supplement.getName().contains("Selenium")) score += 2;
                    }
                    break;
            }
        }
        
        return score;
    }

    public static class RecommendationResult {
        private List<Supplement> mainRecommendations;
        private List<Supplement> additionalRecommendations;
        private List<SupplementScore> supplementDetails;

        public RecommendationResult(List<Supplement> mainRecommendations, 
                                  List<Supplement> additionalRecommendations,
                                  List<SupplementScore> supplementDetails) {
            this.mainRecommendations = mainRecommendations;
            this.additionalRecommendations = additionalRecommendations;
            this.supplementDetails = supplementDetails;
        }

        // –ì–µ—Ç—Ç–µ—Ä—ã
        public List<Supplement> getMainRecommendations() { return mainRecommendations; }
        public List<Supplement> getAdditionalRecommendations() { return additionalRecommendations; }
        public List<SupplementScore> getSupplementDetails() { return supplementDetails; }

        // –°–µ—Ç—Ç–µ—Ä—ã
        public void setMainRecommendations(List<Supplement> mainRecommendations) { 
            this.mainRecommendations = mainRecommendations; 
        }
        public void setAdditionalRecommendations(List<Supplement> additionalRecommendations) { 
            this.additionalRecommendations = additionalRecommendations; 
        }
        public void setSupplementDetails(List<SupplementScore> supplementDetails) { 
            this.supplementDetails = supplementDetails; 
        }
    }
}

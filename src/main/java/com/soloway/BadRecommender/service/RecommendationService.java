package com.soloway.BadRecommender.service;

import com.soloway.BadRecommender.model.Question;
import com.soloway.BadRecommender.model.UserAnswer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.stream.Collectors;

@Service
public class RecommendationService {

    private final GoogleSheetsDataService googleSheetsDataService;
    private final ScoreCalculationService scoreCalculationService;
    
    // –ú–∞–ø–ø–∏–Ω–≥ –º–µ–∂–¥—É –∫–æ–¥–∞–º–∏ —Ç–µ–º –∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≤ Google Sheets
    private static final Map<String, String> TOPIC_MAPPING = createTopicMapping();
    
    // –û–±—Ä–∞—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞ —Ç–µ–º—ã –ø–æ —Ä—É—Å—Å–∫–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
    private static final Map<String, String> REVERSE_TOPIC_MAPPING = createReverseTopicMapping();
    
    private static Map<String, String> createTopicMapping() {
        Map<String, String> mapping = new HashMap<>();
        mapping.put("energy", "–ë–æ–¥—Ä–æ—Å—Ç—å –∏ —ç–Ω–µ—Ä–≥–∏—è");
        mapping.put("sleep", "–ö—Ä–µ–ø–∫–∏–π —Å–æ–Ω, –º–µ–Ω—å—à–µ —Å—Ç—Ä–µ—Å—Å–∞");
        mapping.put("weight", "–ö–æ–Ω—Ç—Ä–æ–ª—å –≤–µ—Å–∞ –∏ –∞–ø–ø–µ—Ç–∏—Ç–∞");
        mapping.put("skin", "–ß–∏—Å—Ç–∞—è –∫–æ–∂–∞, –∫—Ä–µ–ø–∫–∏–µ –≤–æ–ª–æ—Å—ã");
        mapping.put("digestion", "–ö–æ–º—Ñ–æ—Ä—Ç –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è");
        mapping.put("joints", "–ü–æ–¥–≤–∏–∂–Ω—ã–µ —Å—É—Å—Ç–∞–≤—ã, –∫—Ä–µ–ø–∫–∏–µ –∫–æ—Å—Ç–∏");
        mapping.put("immunity", "–°–∏–ª—å–Ω—ã–π –∏–º–º—É–Ω–∏—Ç–µ—Ç");
        mapping.put("heart", "–ó–¥–æ—Ä–æ–≤–æ–µ —Å–µ—Ä–¥—Ü–µ –∏ —Å–æ—Å—É–¥—ã");
        mapping.put("thyroid", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã");
        mapping.put("female", "–†–µ–≥—É–ª—è—Ä–Ω—ã–π —Ü–∏–∫–ª, –º—è–≥–∫–∏–π –ü–ú–°");
        mapping.put("menopause", "–ú–µ–Ω–æ–ø–∞—É–∑–∞ –±–µ–∑ –ø—Ä–∏–ª–∏–≤–æ–≤");
        mapping.put("male", "–ú—É–∂—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ");
        mapping.put("iron", "–ü–æ–¥–Ω—è—Ç—å –≥–µ–º–æ–≥–ª–æ–±–∏–Ω");
        mapping.put("focus", "–§–æ–∫—É—Å –∏ –ø–∞–º—è—Ç—å");
        return mapping;
    }
    
    private static Map<String, String> createReverseTopicMapping() {
        Map<String, String> reverseMapping = new HashMap<>();
        for (Map.Entry<String, String> entry : TOPIC_MAPPING.entrySet()) {
            reverseMapping.put(entry.getValue(), entry.getKey());
        }
        return reverseMapping;
    }

    @Autowired
    public RecommendationService(GoogleSheetsDataService googleSheetsDataService,
                                ScoreCalculationService scoreCalculationService) {
        this.googleSheetsDataService = googleSheetsDataService;
        this.scoreCalculationService = scoreCalculationService;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Ç–µ–º)
     */
    public List<String> getAvailableTopics() throws IOException {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º –∏–∑ Google Sheets
        return googleSheetsDataService.loadCategories();
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    public List<Question> getQuestionsByTopic(String topicName) throws IOException {
        // topicName —Ç–µ–ø–µ—Ä—å —ç—Ç–æ —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏–∑ Google Sheets
        System.out.println("üîç –ò—â–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: " + topicName);
        List<GoogleSheetsDataService.Question> specificQuestions = 
            googleSheetsDataService.getQuestionsByCategory(topicName);
        
        System.out.println("‚úÖ –°–æ–∑–¥–∞–Ω—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–º—ã '" + topicName + "': " + specificQuestions.size() + " –≤–æ–ø—Ä–æ—Å–æ–≤");
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        List<GoogleSheetsDataService.Question> generalQuestions = 
            googleSheetsDataService.getQuestionsByCategory("–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã");
        
        System.out.println("‚úÖ –°–æ–∑–¥–∞–Ω—ã –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã: " + generalQuestions.size() + " –≤–æ–ø—Ä–æ—Å–æ–≤");
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        List<GoogleSheetsDataService.Question> allQuestions = new ArrayList<>();
        allQuestions.addAll(specificQuestions);
        allQuestions.addAll(generalQuestions);
        
        System.out.println("   –ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: " + allQuestions.size());
        System.out.println("   - –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö: " + specificQuestions.size());
        System.out.println("   - –û–±—â–∏—Ö: " + generalQuestions.size());
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ–¥–µ–ª—å Question
        return allQuestions.stream()
            .map(this::convertToQuestion)
            .collect(Collectors.toList());
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public ScoreCalculationService.RecommendationResult generateAdvancedRecommendations(
            List<UserAnswer> userAnswers, String selectedTopic) throws IOException {
        // selectedTopic —Ç–µ–ø–µ—Ä—å —ç—Ç–æ —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏–∑ Google Sheets
        System.out.println("üîç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–º—ã: " + selectedTopic);
        return scoreCalculationService.calculateScores(userAnswers, selectedTopic);
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç GoogleSheetsDataService.Question –≤ –º–æ–¥–µ–ª—å Question
     */
    private Question convertToQuestion(GoogleSheetsDataService.Question gsQuestion) {
        Question question = new Question();
        question.setId(gsQuestion.getId());
        question.setText(gsQuestion.getText());
        
        // –ü–∞—Ä—Å–∏–º –æ–ø—Ü–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
        if (gsQuestion.getOptions() != null && !gsQuestion.getOptions().isEmpty()) {
            String[] optionsArray = gsQuestion.getOptions().split("/");
            List<String> options = java.util.Arrays.stream(optionsArray)
                .map(String::trim)
                .filter(option -> !option.isEmpty())
                .collect(Collectors.toList());
            question.setOptions(options);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
        if ("checkbox".equalsIgnoreCase(gsQuestion.getType())) {
            question.setType(com.soloway.BadRecommender.model.enums.QuestionType.FACTOR);
        } else if ("radio".equalsIgnoreCase(gsQuestion.getType())) {
            question.setType(com.soloway.BadRecommender.model.enums.QuestionType.FACTOR);
        } else {
            question.setType(com.soloway.BadRecommender.model.enums.QuestionType.FACTOR);
        }
        
        question.setRelevant(true);
        question.setGender(null);
        question.setMinAge(null);
        question.setEffects(null);
        
        return question;
  }
}


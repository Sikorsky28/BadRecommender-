package com.soloway.BadRecommender.service;

import com.soloway.BadRecommender.model.Supplement;
import com.soloway.BadRecommender.model.SupplementScore;
import com.soloway.BadRecommender.model.UserAnswer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class ScoreCalculationService {

    private final GoogleSheetsDataService googleSheetsDataService;
    private final GoogleSheetsService googleSheetsService;

    @Autowired
    public ScoreCalculationService(GoogleSheetsDataService googleSheetsDataService,
                                  GoogleSheetsService googleSheetsService) {
        this.googleSheetsDataService = googleSheetsDataService;
        this.googleSheetsService = googleSheetsService;
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–ª—ã –¥–ª—è –¥–æ–±–∞–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public RecommendationResult calculateScores(List<UserAnswer> userAnswers, String selectedCategory) throws IOException {
        System.out.println("üîç –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: " + selectedCategory);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ–±–∞–≤–∫–∏
        List<Supplement> supplements = googleSheetsService.loadSupplements();
        System.out.println("üíä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–±–∞–≤–æ–∫: " + supplements.size());
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
        List<GoogleSheetsDataService.AnswerScore> answerScores = googleSheetsDataService.loadAnswerScores();
        System.out.println("üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–∞–≤–∏–ª –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤: " + answerScores.size());
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –±–∞–ª–ª—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
        List<GoogleSheetsDataService.BaseScore> baseScores = googleSheetsDataService.loadBaseScores();
        System.out.println("üèÜ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –±–∞–∑–æ–≤—ã—Ö –±–∞–ª–ª–æ–≤: " + baseScores.size());
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–ª—ã –¥–ª—è –≤—Å–µ—Ö –¥–æ–±–∞–≤–æ–∫ —Å –±–∞–∑–æ–≤—ã–º–∏ –±–∞–ª–ª–∞–º–∏
        Map<String, SupplementScore> supplementScores = new HashMap<>();
        for (Supplement supplement : supplements) {
            // –ò—â–µ–º –±–∞–∑–æ–≤—ã–µ –±–∞–ª–ª—ã –¥–ª—è —ç—Ç–æ–π –¥–æ–±–∞–≤–∫–∏ –∏ —Ç–µ–º—ã
            double baseScore = baseScores.stream()
                .filter(bs -> bs.getSupplementCode().equals(supplement.getCode()) && 
                             bs.getTopic().equalsIgnoreCase(selectedCategory))
                .mapToDouble(GoogleSheetsDataService.BaseScore::getBaseScore)
                .sum();
            
            SupplementScore supplementScore = new SupplementScore(supplement.getName(), (int) baseScore);
            if (baseScore > 0) {
                System.out.println("üèÜ " + supplement.getName() + " –ø–æ–ª—É—á–∏–ª –±–∞–∑–æ–≤—ã–µ " + baseScore + " –±–∞–ª–ª–æ–≤ –∑–∞ —Ç–µ–º—É '" + selectedCategory + "'");
            }
            supplementScores.put(supplement.getCode(), supplementScore);
        }
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –æ—Ç–≤–µ—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for (UserAnswer userAnswer : userAnswers) {
            System.out.println("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: " + userAnswer.getQuestionId() + " = " + userAnswer.getAnswer());
            
            // –ò—â–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
            List<GoogleSheetsDataService.AnswerScore> relevantRules = answerScores.stream()
                .filter(rule -> rule.getQuestionId().equals(userAnswer.getQuestionId()) &&
                               rule.getAnswer().equalsIgnoreCase(userAnswer.getAnswer()))
                .collect(Collectors.toList());
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–ª–ª—ã
            for (GoogleSheetsDataService.AnswerScore rule : relevantRules) {
                String supplementCode = rule.getSupplementCode();
                double score = rule.getScore();
                
                if (supplementScores.containsKey(supplementCode)) {
                    SupplementScore supplementScore = supplementScores.get(supplementCode);
                    supplementScore.addScore((int) score);
                    System.out.println("üìä " + supplementScore.getSupplementName() + " –ø–æ–ª—É—á–∏–ª " + score + " –±–∞–ª–ª–æ–≤ –∑–∞ –æ—Ç–≤–µ—Ç '" + userAnswer.getAnswer() + "' –Ω–∞ –≤–æ–ø—Ä–æ—Å '" + userAnswer.getQuestionId() + "'");
                }
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–∫–∏ –ø–æ –±–∞–ª–ª–∞–º
        List<SupplementScore> sortedScores = supplementScores.values().stream()
            .filter(score -> score.getCurrentScore() > 0)
            .sorted(Comparator.comparing(SupplementScore::getCurrentScore).reversed())
            .collect(Collectors.toList());
        
        System.out.println("‚úÖ –†–∞—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –¥–æ–±–∞–≤–æ–∫ —Å –±–∞–ª–ª–∞–º–∏: " + sortedScores.size());
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        return generateRecommendations(sortedScores, supplements);
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
     */
    private RecommendationResult generateRecommendations(List<SupplementScore> sortedScores, List<Supplement> supplements) {
        List<SupplementWithScore> mainRecommendations = new ArrayList<>();
        List<SupplementWithScore> additionalRecommendations = new ArrayList<>();
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—Ç–æ–ø-3)
        for (int i = 0; i < Math.min(3, sortedScores.size()); i++) {
            SupplementScore supplementScore = sortedScores.get(i);
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–±–∞–≤–∫–µ –ø–æ –∏–º–µ–Ω–∏
            Supplement supplement = supplements.stream()
                .filter(s -> s.getName().equals(supplementScore.getSupplementName()))
                .findFirst()
                .orElse(null);
            
            if (supplement != null) {
                mainRecommendations.add(new SupplementWithScore(supplement, supplementScore.getCurrentScore()));
            }
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—Å–ª–µ–¥—É—é—â–∏–µ 2)
        for (int i = 3; i < Math.min(5, sortedScores.size()); i++) {
            SupplementScore supplementScore = sortedScores.get(i);
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–±–∞–≤–∫–µ –ø–æ –∏–º–µ–Ω–∏
            Supplement supplement = supplements.stream()
                .filter(s -> s.getName().equals(supplementScore.getSupplementName()))
                .findFirst()
                .orElse(null);
            
            if (supplement != null) {
                additionalRecommendations.add(new SupplementWithScore(supplement, supplementScore.getCurrentScore()));
            }
        }
        
        System.out.println("üèÜ –û—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: " + mainRecommendations.size());
        System.out.println("üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: " + additionalRecommendations.size());
        
        return new RecommendationResult(mainRecommendations, additionalRecommendations);
    }

    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–±–∞–≤–∫–∞—Ö
     */
    public static class RecommendationResult {
        private final List<SupplementWithScore> mainRecommendations;
        private final List<SupplementWithScore> additionalRecommendations;

        public RecommendationResult(List<SupplementWithScore> mainRecommendations, 
                                   List<SupplementWithScore> additionalRecommendations) {
            this.mainRecommendations = mainRecommendations;
            this.additionalRecommendations = additionalRecommendations;
        }

        public List<SupplementWithScore> getMainRecommendations() {
            return mainRecommendations;
        }

        public List<SupplementWithScore> getAdditionalRecommendations() {
            return additionalRecommendations;
        }
    }

    /**
     * –î–æ–±–∞–≤–∫–∞ —Å –±–∞–ª–ª–∞–º–∏
     */
    public static class SupplementWithScore {
        private final Supplement supplement;
        private final int score;

        public SupplementWithScore(Supplement supplement, int score) {
            this.supplement = supplement;
            this.score = score;
        }

        public Supplement getSupplement() {
            return supplement;
        }

        public int getScore() {
            return score;
        }
    }
}

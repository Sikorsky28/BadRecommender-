package com.soloway.BadRecommender.repository;

import com.soloway.BadRecommender.model.Supplement;
import com.soloway.BadRecommender.service.GoogleSheetsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;

@Repository
public class GoogleSheetsSupplementRepository implements SupplementRepositoryInterface {

    private final GoogleSheetsService googleSheetsService;
    private List<Supplement> supplementsCache = new ArrayList<>();
    private long lastCacheUpdate = 0;
    private static final long CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

    @Autowired
    public GoogleSheetsSupplementRepository(GoogleSheetsService googleSheetsService) {
        this.googleSheetsService = googleSheetsService;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
     */
    private void refreshCacheIfNeeded() {
        long currentTime = System.currentTimeMillis();
        if (currentTime - lastCacheUpdate > CACHE_TTL) {
            try {
                System.out.println("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏–∑ Google Sheets...");
                supplementsCache = googleSheetsService.loadSupplements();
                lastCacheUpdate = currentTime;
                System.out.println("‚úÖ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω: " + supplementsCache.size() + " –¥–æ–±–∞–≤–æ–∫");
            } catch (IOException e) {
                System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: " + e.getMessage());
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                if (supplementsCache.isEmpty()) {
                    System.err.println("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ");
                    supplementsCache = getFallbackSupplements();
                }
            }
        }
    }

    @Override
    public List<Supplement> getAll() {
        refreshCacheIfNeeded();
        return supplementsCache.stream()
                .filter(Supplement::isActive)
                .collect(Collectors.toList());
    }

    @Override
    public List<Supplement> getAllIncludingInactive() {
        refreshCacheIfNeeded();
        return new ArrayList<>(supplementsCache);
    }

    @Override
    public Optional<Supplement> getById(Long id) {
        refreshCacheIfNeeded();
        return supplementsCache.stream()
                .filter(s -> s.getId().equals(id))
                .findFirst();
    }

    @Override
    public List<Supplement> getByCategory(String category) {
        refreshCacheIfNeeded();
        return supplementsCache.stream()
                .filter(s -> s.getCategory().getName().equalsIgnoreCase(category))
                .filter(Supplement::isActive)
                .collect(Collectors.toList());
    }

    @Override
    public List<Supplement> getByTag(String tag) {
        refreshCacheIfNeeded();
        return supplementsCache.stream()
                .filter(s -> s.getTags().contains(tag.toLowerCase()))
                .filter(Supplement::isActive)
                .collect(Collectors.toList());
    }

    @Override
    public List<Supplement> getByTags(Set<String> tags) {
        refreshCacheIfNeeded();
        return supplementsCache.stream()
                .filter(s -> s.getTags().stream().anyMatch(tags::contains))
                .filter(Supplement::isActive)
                .collect(Collectors.toList());
    }

    @Override
    public List<Supplement> searchByName(String name) {
        refreshCacheIfNeeded();
        return supplementsCache.stream()
                .filter(s -> s.getName().toLowerCase().contains(name.toLowerCase()))
                .filter(Supplement::isActive)
                .collect(Collectors.toList());
    }

    @Override
    public Supplement save(Supplement supplement) {
        try {
            if (supplement.getId() == null) {
                // –ù–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
                Long newId = supplementsCache.stream()
                        .mapToLong(Supplement::getId)
                        .max()
                        .orElse(0) + 1;
                supplement.setId(newId);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
                googleSheetsService.saveSupplement(supplement);
            } else {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
                googleSheetsService.updateSupplement(supplement);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            lastCacheUpdate = 0; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            refreshCacheIfNeeded();
            
            return supplement;
        } catch (IOException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets: " + e.getMessage());
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–±–∞–≤–∫—É", e);
        }
    }

    @Override
    public void deleteById(Long id) {
        try {
            googleSheetsService.deleteSupplement(id);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            lastCacheUpdate = 0;
            refreshCacheIfNeeded();
        } catch (IOException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Google Sheets: " + e.getMessage());
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–æ–±–∞–≤–∫—É", e);
        }
    }

    @Override
    public void deactivateById(Long id) {
        Optional<Supplement> supplementOpt = getById(id);
        if (supplementOpt.isPresent()) {
            Supplement supplement = supplementOpt.get();
            supplement.setActive(false);
            save(supplement);
        }
    }

    @Override
    public void activateById(Long id) {
        Optional<Supplement> supplementOpt = getById(id);
        if (supplementOpt.isPresent()) {
            Supplement supplement = supplementOpt.get();
            supplement.setActive(true);
            save(supplement);
        }
    }

    @Override
    public List<String> getAllCategories() {
        refreshCacheIfNeeded();
        return supplementsCache.stream()
                .map(s -> s.getCategory().getName())
                .distinct()
                .sorted()
                .collect(Collectors.toList());
    }

    @Override
    public Set<String> getAllTags() {
        refreshCacheIfNeeded();
        return supplementsCache.stream()
                .flatMap(s -> s.getTags().stream())
                .collect(Collectors.toSet());
    }

    /**
     * Fallback –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Google Sheets
     */
    private List<Supplement> getFallbackSupplements() {
        List<Supplement> fallback = new ArrayList<>();
        
        // –ë–∞–∑–æ–≤—ã–µ –¥–æ–±–∞–≤–∫–∏ –¥–ª—è fallback
        fallback.add(new Supplement(1L, "Energy", "–ë–∞–∑–æ–≤–∞—è –¥–æ–±–∞–≤–∫–∞ –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏", 
                new com.soloway.BadRecommender.model.Category("–≠–Ω–µ—Ä–≥–∏—è"), 
                Set.of("energy", "vitality"), true));
        
        fallback.add(new Supplement(2L, "Magnesium B6", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã", 
                new com.soloway.BadRecommender.model.Category("–°–æ–Ω"), 
                Set.of("sleep", "stress", "magnesium"), true));
        
        fallback.add(new Supplement(3L, "Vitamin D3", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞", 
                new com.soloway.BadRecommender.model.Category("–ò–º–º—É–Ω–∏—Ç–µ—Ç"), 
                Set.of("immunity", "vitamin-d"), true));
        
        return fallback;
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à
     */
    public void forceRefreshCache() {
        lastCacheUpdate = 0;
        refreshCacheIfNeeded();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
     */
    public boolean testConnection() {
        return googleSheetsService.testConnection();
    }
}
